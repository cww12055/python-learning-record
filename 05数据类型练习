"""
在屏幕上显示跑马灯文字。
"""
"""

import  os
import time
def main():
    content='北京欢迎你为你开天辟地…………'
    while True:
        #清理屏幕上的输出
        os.system('cls')
        print(content)
        #休眠200ms
        time.sleep(0.2)
        content=content[1:]+content[0]

if __name__=='__main__':
    main()
    
"""

"""
设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。
"""

import random


def generate_code(code_len=4):
    all_chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    last_pos = len(all_chars) - 1
    code = ''
    for i in range(code_len):
        index = random.randint(0, last_pos)
        code += all_chars[index]
    return print(code)


"""
设计一个函数返回给定文件名的后缀名
"""


def get_suffix(filename, has_dot=False):
    pos = filename.rfind('.')
    if 0 < pos < len(filename) - 1:
        index = pos if has_dot else pos + 1
        return filename[index:]
    else:
        return ''


"""
设计一个函数返回传入的列表中最大和第二大的元素的值
"""


def max2(x):
    m1, m2 = (x[0], x[1]) if x[0] > x[1] else (x[1], x[0])
    for index in range(2, len(x)):
        if x[index] > m1:
            m2 = m1
            m1 = x[index]
        elif x[index] > m2:
            m2 = x[index]
    return m1, m2


"""
计算指定的年月日是这一年的第几天。
"""
"""
def is_leap_year(year):  # 判断指定的年份是不是闰年
    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0

def which_day(year, month, date):
    days_of_month = [
        [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    ][is_leap_year(year)]  #列表的切片运算，不是闰年选择列表第0个元素，是闰年选择第1个元素
    total = 0
    for index in range(month-1):
        total+=days_of_month[index]
    return total+date

def main():
    print(which_day(1990,11,30))

if __name__ == '__main__':
    main()
"""

"""
打印杨辉三角
"""


def main():
    num = int(input('Number of rows:'))
    yh = [[]] * num
    for row in range(len(yh)):
        yh[row] = [None] * (row + 1)
        for col in range(len(yh[row])):
            if col == 0 or col == row:
                yh[row][col] = 1
            else:
                yh[row][col] = yh[row - 1][col] + yh[row - 1][col - 1]
            print(yh[row][col], end='\t')
        print()


if __name__ == '__main__':
    main()

"""
经典案例1.双色球选号
"""

from random import randrange, randint, sample


def display(balls):  # 输出列表中的双色球号码
    for index, ball in enumerate(balls):
        if index == len(balls) - 1:
            print('|', end='')
        print('%02d' % ball, end=' ')
    print()


def random_select():  # 随机选择一组号码
    red_balls = [x for x in range(1, 34)]
    selected_balls = []
    selected_balls = sample(red_balls, 6)
    # 上面使用random模块的sample函数来实现从列表中选择不重复的n个元素。
    selected_balls.sort()
    selected_balls.append(randint(1, 16))
    return selected_balls


def main():
    n = int(input('机选几注：'))
    for i in range(n):
        display(random_select())


if __name__ == '__main__':
    main()

"""
经典案例2.约瑟夫环问题
《幸运的基督徒》
有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，
有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，
他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。
由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么站的，
哪些位置是基督徒哪些位置是非基督徒。
"""


def main():
    persons = [True] * 30
    counter, index, number = 0, 0, 0
    while counter < 15:
        if persons[index]:
            number += 1
            if number == 9:
                persons[index] = False
                counter += 1
                number = 0
        index += 1
        index %= 30
    for person in persons:
        print('Christianus' if person else 'nonChristianus', end='-')


if __name__ == '__main__':
    main()

"""
综合案例3：井字棋游戏。
"""
import os


def print_board(board):
    print(board['TL'] + '|' + board['TM'] + '|' + board['TR'])
    print('-+-+-')
    print(board['ML'] + '|' + board['MM'] + '|' + board['MR'])
    print('-+-+-')
    print(board['BL'] + '|' + board['BM'] + '|' + board['BR'])


def main():
    init_board = {
        'TL': ' ', 'TM': ' ', 'TR': ' ',
        'ML': ' ', 'MM': ' ', 'MR': ' ',
        'BL': ' ', 'BM': ' ', 'BR': ' ',
    }
    begin = True
    while begin:
        curr_board = init_board.copy()
        begin = False
        turn = 'x'
        counter = 0
        os.system('cls')
        print_board(curr_board)
        while counter < 9:
            move = input('轮到%s走棋，请输入位置：' % turn)
            if curr_board[move] == ' ':
                counter += 1
                curr_board[move] = turn
                if turn == 'x':
                    turn = 'o'
                else:
                    turn = 'x'
            os.system('cls')
            print_board(curr_board)
        choice = input('再玩一局？(yes|no)')
        begin = choice == 'yes'


if __name__ == '__main__':
    main()

