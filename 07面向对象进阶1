"""
之前我们讨论过python属性和方法访问权限的问题，虽然不建议把属性设置为私有的，
但是如果直接将属性暴漏给外界也有问题，之前的建议是将属性以单下划线开头，暗示属性是受保护的
不建议外界直接访问

但是要想访问的话，可以考虑用@property包装器来包装getter(访问器)和setter(修改器)方法，
使得对属性的访问既安全又方便
"""


class Person(object):
    # 限定Person对象只能绑定_name,_age和_gender属性
    __slots__ = ('_name', '_age', '_gender')

    def __init__(self, name, age):
        self._name = name
        self._age = age

    # 访问器 ——getter方法
    @property
    def name(self):
        return self._name

    # 访问器 ——getter方法
    @property
    def age(self):
        return self._age

    # 修改器 ——setter方法
    @age.setter
    def age(self, age):
        self._age = age

    def play(self):
        if self._age <= 16:
            print('%s正在玩飞行棋' % self._name)
        else:
            print('%s正在玩斗地主' % self._name)


def main():
    person = Person('王大锤', 12)
    person.play()
    person.age = 22
    person.play()
    person._gender = '男'
    # person._height=180
    # AttributeError: 'Person' object has no attribute '_height'


if __name__ == '__main__':
    main()

"""
__slots__魔法

python是一门动态语言，通常动态语言允许我们在程序运行时给对象绑定新的属性和方法，
也可以对已经绑定的属性和方法进行解绑定
如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定
需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用

应用见上面程序代码
"""

"""
静态方法和类方法
1.静态方法，具体看演示
"""
"""
我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，
但是传入的三条边长未必能构造出三角形对象，
因此我们可以先写一个方法来验证三条边长是否可以构成三角形，
"""

from math import sqrt


class Triangle(object):

    def __init__(self, a, b, c):  # 参数初始化
        self._a = a
        self._b = b
        self._c = c

    @staticmethod  # 这个方法是对于三角形类来说的，并不是我们需要构成的三角形对象，所以用静态方法
    def is_valid(a, b, c):
        return a + b > c and b + c > a and a + c > b

    def perimeter(self):
        return self._a + self._b + self._c

    def area(self):
        half = self.perimeter() / 2
        return sqrt(half * (half - self._a) * (half - self._b) * (half - self._c))


def main():
    a, b, c = 9, 7, 5
    # 静态方法和类方法都是通过给类发消息来调用的
    if Triangle.is_valid(a, b, c):
        t = Triangle(a, b, c)
        print(t.perimeter())
        print(t.area())
    else:
        print('无法构成三角形')


if __name__ == '__main__':
    main()

"""
2.类方法
与静态方法类似，我们还可以在类中定义类方法，类方法的第一个参数约定名是cls，具体看下面代码
"""

from time import time, localtime, sleep


class Clock(object):

    def __init__(self, hour=0, minute=0, second=0):  # 初始化参数定义
        self._hour = hour
        self._minute = minute
        self._second = second

    @classmethod  # 类方法
    def now(cls):
        ctime = localtime(time())
        return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)
        #获取系统时间
    
    def run(self):
        self._second += 1
        if self._second == 60:
            self._second = 0
            self._minute += 1
            if self._minute == 60:
                self._minute = 0
                self._hour += 1
                if self._hour == 24:
                    self._hour = 0

    def show(self):
        return '%02d:%02d:%02d' % (self._hour, self._minute, self._second)

def main():
    #通过类方法创建对象并获取系统时间
    clock=Clock.now()
    while True:
        print(clock.show())
        sleep(1)
        clock.run()

if __name__ == '__main__':
    main()


"""
类之间的关系
1.继承
"""

class Person(object):

    def __init__(self, name, age):
        self._name = name
        self._age = age

    # 访问器 ——getter方法
    @property
    def name(self):
        return self._name

    # 访问器 ——getter方法
    @property
    def age(self):
        return self._age

    # 修改器 ——setter方法
    @age.setter
    def age(self, age):
        self._age = age

    def play(self):
        print('%s正在愉快的玩耍' % self._name)

    def watch_av(self):
        if self._age >= 18:
            print('%s正在观看爱情动作片' % self._name)
        else:
            print('%s只能观看熊出没' % self._name)

class Student(Person):
    #变量初始化
    def __init__(self,name,age,grade):
        super().__init__(name,age)
        #当需要继承父类构造函数中的内容，且子类需要在父类的基础上补充时，使用super().__init__()方法
        self._grade=grade

    @property
    def grade(self):
        return self._grade

    @grade.setter
    def grade(self,grade):
        self._grade=grade

    def study(self,course):
        print('%s的%s正在学习%s'%(self._grade,self._name,course))

class Teacher(Person):

    def __init__(self,name,age,title):
        super().__init__(name,age)
        self._title=title

    @property
    def title(self):
        return self._title

    @title.setter
    def title(self,title):
        self._title=title

    def teach(self,course):
        print('%s%s正在讲%s'%(self._name,self._title,course))

def main():
    stu=Student('王大锤',15,'初三')
    stu.study('数学')
    stu.watch_av()
    t=Teacher('大宝',45,'砖家')
    t.teach('python程序设计')
    t.watch_av()

if __name__ == '__main__':
    main()

"""
2.多态
子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，
这个动作称之为方法重写（override）。
通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，
当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，
这个就是多态（poly-morphism）------同样的方法做了不同的事情
"""
from abc import ABCMeta,abstractmethod

class Pet(object,metaclass=ABCMeta):

    def __init__(self,nickname):
        self._nickname=nickname

    @abstractmethod
    def make_voice(self):
        pass

class Dog(Pet):
    def make_voice(self):
        print('%s:汪汪汪。。。'%self._nickname)

class Cat(Pet):

    def make_voice(self):
        print('%s:喵...喵。。。' % self._nickname)

def main():
    pets=[Dog('旺财'),Cat('凯蒂'),Dog('大黄')]
    for pet in pets:
        pet.make_voice()

if __name__ == '__main__':
    main()







